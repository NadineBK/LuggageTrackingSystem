namespace ca.mcgill.ecse681.lts.model;

class LTS
{
	singleton;
	1 <@>- * Passenger passengers;
	1 <@>- * Flight flights;
	1 <@>- * Transaction transactions;
	1 <@>- * CreditCard creditCards;
}

class Luggage
{
	float weight;
	[weight > 0]
	Boolean priority;
	Boolean fragile;
	location;
	before constructor {
	    if (aLocation == null || aLocation.length() == 0) {
	    	throw new RuntimeException("The name of a passenger cannot be empty.");
	    }
	}
	before setLocation{
		if (aLocation == null || aLocation.length() == 0) {
			return false;
		}
  	}
	0..2 -<@> 1 Passenger;		
	1 <@>- 1 Tag;
 }

class Passenger
{
	passportID;
	lastName;
	firstName;
	Boolean expiredPassport;
	float luggageWeightLimit; 
	[luggageWeightLimit > 0]
	Boolean loungeAccess;
	Boolean overweightLuggagePrivilege;
	* -- * Flight;
	1 -- * Transaction;
	
	before constructor {
	    if (aFirstName == null || aFirstName.length() == 0) {
	    	throw new RuntimeException("The name of a passenger cannot be empty.");
	    }
	}
	before setFirstName{
		if (aFirstName == null || aFirstName.length() == 0) {
			return false;
		}
  	}
  	
  	before constructor {
	    if (aLastName == null || aLastName.length() == 0) {
	    	throw new RuntimeException("The name of a passenger cannot be empty.");
	    }
	}
	before setLastName{
		if (aLastName == null || aLastName.length() == 0) {
			return false;
		}
  	}
}

class Flight
{
	source;
	destination;
	Date flightdate;
	
	airline;
	number;
	* -- * Tag;
	
	before constructor {
	    if (aSource == null || aSource.length() == 0) {
	    	throw new RuntimeException("The source cannot be empty.");
	    }
	}
	before setSource{
		if (aSource == null || aSource.length() == 0) {
			return false;
		}
  	}
  	
  	before constructor {
	    if (aDestination == null || aDestination.length() == 0) {
	    	throw new RuntimeException("The destination cannot be empty.");
	    }
	}
	before setDestination{
		if (aDestination == null || aDestination.length() == 0) {
			return false;
		}
  	}
  	
  	before constructor {
	    if (aAirline == null || aAirline.length() == 0) {
	    	throw new RuntimeException("The airline cannot be empty.");
	    }
	}
	before setAirline{
		if (aAirline == null || aAirline.length() == 0) {
			return false;
		}
  	}
  	
  	before constructor {
	    if (aNumber == null || aNumber.length() == 0) {
	    	throw new RuntimeException("The flight number cannot be empty.");
	    }
	}
	before setNumber{
		if (aNumber == null || aNumber.length() == 0) {
			return false;
		}
  	}	
	
}

class CreditCard
{
	ccnumber;
	Date expirydate;
	ccname;
	
	before constructor {
	    if (aCcname == null || aCcname.length() == 0) {
	    	throw new RuntimeException("The name on the credit card cannot be empty.");
	    }
	}
	before setCcname{
		if (aCcname == null || aCcname.length() == 0) {
			return false;
		}
  	}
  			
	Integer securityCode;
	[securityCode > 0]
	1 -- * Transaction;
}

class Transaction
{
	autounique transactionID;
	float amount;
	[amount > 0]
	Boolean paid;
	Date transactiondate;
	
}

class Tag
{
	autounique luggageID;
}